
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e0  080027e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e0  080027e0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e0  080027e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e4  080027e4  000127e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080027e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000001c  08002804  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002804  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009005  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca7  00000000  00000000  0002904a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002acf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000080bb  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003007  00000000  00000000  000341eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000371f2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000029e4  00000000  00000000  00037244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002778 	.word	0x08002778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002778 	.word	0x08002778

0800014c <Traffic_Light_Reset>:

uint8_t temp_duRed;
uint8_t temp_duAmber;
uint8_t temp_duGreen;

void Traffic_Light_Reset(void){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	runState = NORMAL_MODE;
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <Traffic_Light_Reset+0x40>)
 8000152:	2201      	movs	r2, #1
 8000154:	701a      	strb	r2, [r3, #0]

	ledState[0] = RED;
 8000156:	4b0e      	ldr	r3, [pc, #56]	; (8000190 <Traffic_Light_Reset+0x44>)
 8000158:	2203      	movs	r2, #3
 800015a:	701a      	strb	r2, [r3, #0]
	light_counter[0] = durationRed * SECOND / CYCLE;
 800015c:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <Traffic_Light_Reset+0x48>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	461a      	mov	r2, r3
 8000162:	2364      	movs	r3, #100	; 0x64
 8000164:	fb02 f303 	mul.w	r3, r2, r3
 8000168:	4a0b      	ldr	r2, [pc, #44]	; (8000198 <Traffic_Light_Reset+0x4c>)
 800016a:	6013      	str	r3, [r2, #0]

	ledState[1] = GREEN;
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <Traffic_Light_Reset+0x44>)
 800016e:	2206      	movs	r2, #6
 8000170:	705a      	strb	r2, [r3, #1]
	light_counter[1] = durationGreen * SECOND / CYCLE;
 8000172:	4b0a      	ldr	r3, [pc, #40]	; (800019c <Traffic_Light_Reset+0x50>)
 8000174:	781b      	ldrb	r3, [r3, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	2364      	movs	r3, #100	; 0x64
 800017a:	fb02 f303 	mul.w	r3, r2, r3
 800017e:	4a06      	ldr	r2, [pc, #24]	; (8000198 <Traffic_Light_Reset+0x4c>)
 8000180:	6053      	str	r3, [r2, #4]
}
 8000182:	bf00      	nop
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	20000038 	.word	0x20000038
 8000190:	2000003c 	.word	0x2000003c
 8000194:	20000048 	.word	0x20000048
 8000198:	20000040 	.word	0x20000040
 800019c:	2000004a 	.word	0x2000004a

080001a0 <Global_Init>:

void Global_Init(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	durationRed = DURATION_RED_DEFAULT;
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <Global_Init+0x20>)
 80001a6:	2203      	movs	r2, #3
 80001a8:	701a      	strb	r2, [r3, #0]
	durationAmber = DURATION_AMBER_DEFAULT;
 80001aa:	4b06      	ldr	r3, [pc, #24]	; (80001c4 <Global_Init+0x24>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	701a      	strb	r2, [r3, #0]
	durationGreen = DURATION_GREEN_DEFAULT;
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <Global_Init+0x28>)
 80001b2:	2202      	movs	r2, #2
 80001b4:	701a      	strb	r2, [r3, #0]

	Traffic_Light_Reset();
 80001b6:	f7ff ffc9 	bl	800014c <Traffic_Light_Reset>
}
 80001ba:	bf00      	nop
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	20000048 	.word	0x20000048
 80001c4:	20000049 	.word	0x20000049
 80001c8:	2000004a 	.word	0x2000004a

080001cc <Input_Processing_Init>:

int general_counter;
int modbtn_counter;

void Input_Processing_Init(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	buttonState[SET_BTN] = RELEASED;
 80001d0:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <Input_Processing_Init+0x2c>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	701a      	strb	r2, [r3, #0]
	buttonState[MOD_BTN] = RELEASED;
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <Input_Processing_Init+0x2c>)
 80001d8:	2200      	movs	r2, #0
 80001da:	705a      	strb	r2, [r3, #1]
	buttonState[SEL_BTN] = RELEASED;
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <Input_Processing_Init+0x2c>)
 80001de:	2200      	movs	r2, #0
 80001e0:	709a      	strb	r2, [r3, #2]

	general_counter = 1;
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <Input_Processing_Init+0x30>)
 80001e4:	2201      	movs	r2, #1
 80001e6:	601a      	str	r2, [r3, #0]
	modbtn_counter = DURATION_FOR_INCREASE / CYCLE;
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <Input_Processing_Init+0x34>)
 80001ea:	2214      	movs	r2, #20
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000050 	.word	0x20000050
 80001fc:	20000054 	.word	0x20000054
 8000200:	20000058 	.word	0x20000058

08000204 <IncreaseOne>:

void IncreaseOne(uint8_t* duration){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	(*duration) = (*duration) + 1 > 99 ? 0 : (*duration) + 1;
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b62      	cmp	r3, #98	; 0x62
 8000212:	d804      	bhi.n	800021e <IncreaseOne+0x1a>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	b2da      	uxtb	r2, r3
 800021c:	e000      	b.n	8000220 <IncreaseOne+0x1c>
 800021e:	2200      	movs	r2, #0
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	701a      	strb	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
	...

08000230 <FSM_IncreasingValue>:
void FSM_IncreasingValue(void){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	switch(runState){
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <FSM_IncreasingValue+0x44>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	3b01      	subs	r3, #1
 800023a:	2b03      	cmp	r3, #3
 800023c:	d817      	bhi.n	800026e <FSM_IncreasingValue+0x3e>
 800023e:	a201      	add	r2, pc, #4	; (adr r2, 8000244 <FSM_IncreasingValue+0x14>)
 8000240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000244:	0800026d 	.word	0x0800026d
 8000248:	08000255 	.word	0x08000255
 800024c:	0800025d 	.word	0x0800025d
 8000250:	08000265 	.word	0x08000265
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		IncreaseOne(&temp_duRed);
 8000254:	4808      	ldr	r0, [pc, #32]	; (8000278 <FSM_IncreasingValue+0x48>)
 8000256:	f7ff ffd5 	bl	8000204 <IncreaseOne>
		break;
 800025a:	e008      	b.n	800026e <FSM_IncreasingValue+0x3e>
	case MODIFY_DURATION_AMBER_MODE:
		IncreaseOne(&temp_duAmber);
 800025c:	4807      	ldr	r0, [pc, #28]	; (800027c <FSM_IncreasingValue+0x4c>)
 800025e:	f7ff ffd1 	bl	8000204 <IncreaseOne>
		break;
 8000262:	e004      	b.n	800026e <FSM_IncreasingValue+0x3e>
	case MODIFY_DURATION_GREEN_MODE:
		IncreaseOne(&temp_duGreen);
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <FSM_IncreasingValue+0x50>)
 8000266:	f7ff ffcd 	bl	8000204 <IncreaseOne>
		break;
 800026a:	e000      	b.n	800026e <FSM_IncreasingValue+0x3e>
		break;
 800026c:	bf00      	nop
	}
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	20000038 	.word	0x20000038
 8000278:	2000004b 	.word	0x2000004b
 800027c:	2000004c 	.word	0x2000004c
 8000280:	2000004d 	.word	0x2000004d

08000284 <FSM_ChangingMode>:
void FSM_ChangingMode(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	//Turn off all LEDs.
	WritePinLED(0, ~RED | ~AMBER | ~GREEN);
 8000288:	21ff      	movs	r1, #255	; 0xff
 800028a:	2000      	movs	r0, #0
 800028c:	f000 fe8e 	bl	8000fac <WritePinLED>
	WritePinLED(1, ~RED | ~AMBER | ~GREEN);
 8000290:	21ff      	movs	r1, #255	; 0xff
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fe8a 	bl	8000fac <WritePinLED>
	switch(runState){
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <FSM_ChangingMode+0x88>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	2b03      	cmp	r3, #3
 80002a0:	d831      	bhi.n	8000306 <FSM_ChangingMode+0x82>
 80002a2:	a201      	add	r2, pc, #4	; (adr r2, 80002a8 <FSM_ChangingMode+0x24>)
 80002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a8:	080002b9 	.word	0x080002b9
 80002ac:	080002cf 	.word	0x080002cf
 80002b0:	080002e5 	.word	0x080002e5
 80002b4:	080002fb 	.word	0x080002fb
	case NORMAL_MODE:
		runState = MODIFY_DURATION_RED_MODE;
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <FSM_ChangingMode+0x88>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
		general_counter = HALF_SECOND / CYCLE;;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <FSM_ChangingMode+0x8c>)
 80002c0:	2232      	movs	r2, #50	; 0x32
 80002c2:	601a      	str	r2, [r3, #0]
		temp_duRed = durationRed;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <FSM_ChangingMode+0x90>)
 80002c6:	781a      	ldrb	r2, [r3, #0]
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <FSM_ChangingMode+0x94>)
 80002ca:	701a      	strb	r2, [r3, #0]
		break;
 80002cc:	e01b      	b.n	8000306 <FSM_ChangingMode+0x82>
	case MODIFY_DURATION_RED_MODE:
		runState = MODIFY_DURATION_AMBER_MODE;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <FSM_ChangingMode+0x88>)
 80002d0:	2203      	movs	r2, #3
 80002d2:	701a      	strb	r2, [r3, #0]
		general_counter = HALF_SECOND / CYCLE;;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <FSM_ChangingMode+0x8c>)
 80002d6:	2232      	movs	r2, #50	; 0x32
 80002d8:	601a      	str	r2, [r3, #0]
		temp_duAmber = durationAmber;
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <FSM_ChangingMode+0x98>)
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	4b10      	ldr	r3, [pc, #64]	; (8000320 <FSM_ChangingMode+0x9c>)
 80002e0:	701a      	strb	r2, [r3, #0]
		break;
 80002e2:	e010      	b.n	8000306 <FSM_ChangingMode+0x82>
	case MODIFY_DURATION_AMBER_MODE:
		runState = MODIFY_DURATION_GREEN_MODE;
 80002e4:	4b09      	ldr	r3, [pc, #36]	; (800030c <FSM_ChangingMode+0x88>)
 80002e6:	2204      	movs	r2, #4
 80002e8:	701a      	strb	r2, [r3, #0]
		general_counter = HALF_SECOND / CYCLE;;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <FSM_ChangingMode+0x8c>)
 80002ec:	2232      	movs	r2, #50	; 0x32
 80002ee:	601a      	str	r2, [r3, #0]
		temp_duGreen = durationGreen;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <FSM_ChangingMode+0xa0>)
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <FSM_ChangingMode+0xa4>)
 80002f6:	701a      	strb	r2, [r3, #0]
		break;
 80002f8:	e005      	b.n	8000306 <FSM_ChangingMode+0x82>
	case MODIFY_DURATION_GREEN_MODE:
		runState = NORMAL_MODE;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <FSM_ChangingMode+0x88>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]
		Traffic_Light_Reset();
 8000300:	f7ff ff24 	bl	800014c <Traffic_Light_Reset>
		break;
 8000304:	bf00      	nop
	}
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000038 	.word	0x20000038
 8000310:	20000054 	.word	0x20000054
 8000314:	20000048 	.word	0x20000048
 8000318:	2000004b 	.word	0x2000004b
 800031c:	20000049 	.word	0x20000049
 8000320:	2000004c 	.word	0x2000004c
 8000324:	2000004a 	.word	0x2000004a
 8000328:	2000004d 	.word	0x2000004d

0800032c <FSM_SettingValue>:
void FSM_SettingValue(void){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	switch(runState){
 8000330:	4b11      	ldr	r3, [pc, #68]	; (8000378 <FSM_SettingValue+0x4c>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	3b01      	subs	r3, #1
 8000336:	2b03      	cmp	r3, #3
 8000338:	d81a      	bhi.n	8000370 <FSM_SettingValue+0x44>
 800033a:	a201      	add	r2, pc, #4	; (adr r2, 8000340 <FSM_SettingValue+0x14>)
 800033c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000340:	0800036f 	.word	0x0800036f
 8000344:	08000351 	.word	0x08000351
 8000348:	0800035b 	.word	0x0800035b
 800034c:	08000365 	.word	0x08000365
	case NORMAL_MODE:
		break;
	case MODIFY_DURATION_RED_MODE:
		durationRed = temp_duRed;
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <FSM_SettingValue+0x50>)
 8000352:	781a      	ldrb	r2, [r3, #0]
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <FSM_SettingValue+0x54>)
 8000356:	701a      	strb	r2, [r3, #0]
		break;
 8000358:	e00a      	b.n	8000370 <FSM_SettingValue+0x44>
	case MODIFY_DURATION_AMBER_MODE:
		durationAmber = temp_duAmber;
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <FSM_SettingValue+0x58>)
 800035c:	781a      	ldrb	r2, [r3, #0]
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <FSM_SettingValue+0x5c>)
 8000360:	701a      	strb	r2, [r3, #0]
		break;
 8000362:	e005      	b.n	8000370 <FSM_SettingValue+0x44>
	case MODIFY_DURATION_GREEN_MODE:
		durationGreen = temp_duGreen;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <FSM_SettingValue+0x60>)
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <FSM_SettingValue+0x64>)
 800036a:	701a      	strb	r2, [r3, #0]
		break;
 800036c:	e000      	b.n	8000370 <FSM_SettingValue+0x44>
		break;
 800036e:	bf00      	nop
	}
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	20000038 	.word	0x20000038
 800037c:	2000004b 	.word	0x2000004b
 8000380:	20000048 	.word	0x20000048
 8000384:	2000004c 	.word	0x2000004c
 8000388:	20000049 	.word	0x20000049
 800038c:	2000004d 	.word	0x2000004d
 8000390:	2000004a 	.word	0x2000004a

08000394 <FSM_ForInputProcessing>:

//This is abstract function. Use for those function below.
void FSM_ForInputProcessing(void (*processing) (void), const short index){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	807b      	strh	r3, [r7, #2]
	switch(buttonState[index]){
 80003a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003a4:	4a26      	ldr	r2, [pc, #152]	; (8000440 <FSM_ForInputProcessing+0xac>)
 80003a6:	5cd3      	ldrb	r3, [r2, r3]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d032      	beq.n	8000412 <FSM_ForInputProcessing+0x7e>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	dc43      	bgt.n	8000438 <FSM_ForInputProcessing+0xa4>
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d002      	beq.n	80003ba <FSM_ForInputProcessing+0x26>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d010      	beq.n	80003da <FSM_ForInputProcessing+0x46>
		if (!IsButtonPressedOneSec(index)){
			buttonState[index] = RELEASED;
		}
		break;
	}
}
 80003b8:	e03e      	b.n	8000438 <FSM_ForInputProcessing+0xa4>
		if (IsButtonPressed(index)){
 80003ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003be:	4618      	mov	r0, r3
 80003c0:	f000 f9a6 	bl	8000710 <IsButtonPressed>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d031      	beq.n	800042e <FSM_ForInputProcessing+0x9a>
			buttonState[index] = PRESSED;
 80003ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003ce:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <FSM_ForInputProcessing+0xac>)
 80003d0:	2101      	movs	r1, #1
 80003d2:	54d1      	strb	r1, [r2, r3]
			(*processing)();
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4798      	blx	r3
		break;
 80003d8:	e029      	b.n	800042e <FSM_ForInputProcessing+0x9a>
		if (!IsButtonPressed(index)){
 80003da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f996 	bl	8000710 <IsButtonPressed>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d105      	bne.n	80003f6 <FSM_ForInputProcessing+0x62>
			buttonState[index] = RELEASED;
 80003ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <FSM_ForInputProcessing+0xac>)
 80003f0:	2100      	movs	r1, #0
 80003f2:	54d1      	strb	r1, [r2, r3]
		break;
 80003f4:	e01d      	b.n	8000432 <FSM_ForInputProcessing+0x9e>
		} else if (IsButtonPressedOneSec(index)){
 80003f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 f9a6 	bl	800074c <IsButtonPressedOneSec>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d015      	beq.n	8000432 <FSM_ForInputProcessing+0x9e>
			buttonState[index] = PRESSED_MORE_THAN_ONE_SECOND;
 8000406:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <FSM_ForInputProcessing+0xac>)
 800040c:	2102      	movs	r1, #2
 800040e:	54d1      	strb	r1, [r2, r3]
		break;
 8000410:	e00f      	b.n	8000432 <FSM_ForInputProcessing+0x9e>
		if (!IsButtonPressedOneSec(index)){
 8000412:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f998 	bl	800074c <IsButtonPressedOneSec>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d109      	bne.n	8000436 <FSM_ForInputProcessing+0xa2>
			buttonState[index] = RELEASED;
 8000422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000426:	4a06      	ldr	r2, [pc, #24]	; (8000440 <FSM_ForInputProcessing+0xac>)
 8000428:	2100      	movs	r1, #0
 800042a:	54d1      	strb	r1, [r2, r3]
		break;
 800042c:	e003      	b.n	8000436 <FSM_ForInputProcessing+0xa2>
		break;
 800042e:	bf00      	nop
 8000430:	e002      	b.n	8000438 <FSM_ForInputProcessing+0xa4>
		break;
 8000432:	bf00      	nop
 8000434:	e000      	b.n	8000438 <FSM_ForInputProcessing+0xa4>
		break;
 8000436:	bf00      	nop
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000050 	.word	0x20000050

08000444 <FSM_ProcessingSetValueButton>:
void FSM_ProcessingSetValueButton(void){
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	FSM_ForInputProcessing(FSM_SettingValue, SET_BTN);
 8000448:	2100      	movs	r1, #0
 800044a:	4802      	ldr	r0, [pc, #8]	; (8000454 <FSM_ProcessingSetValueButton+0x10>)
 800044c:	f7ff ffa2 	bl	8000394 <FSM_ForInputProcessing>
}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	0800032d 	.word	0x0800032d

08000458 <FSM_ProcessingModifyButton>:
void FSM_ProcessingModifyButton(void){
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
	FSM_ForInputProcessing(FSM_IncreasingValue, MOD_BTN);
 800045c:	2101      	movs	r1, #1
 800045e:	480d      	ldr	r0, [pc, #52]	; (8000494 <FSM_ProcessingModifyButton+0x3c>)
 8000460:	f7ff ff98 	bl	8000394 <FSM_ForInputProcessing>
	if (buttonState[MOD_BTN] == PRESSED_MORE_THAN_ONE_SECOND) {
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <FSM_ProcessingModifyButton+0x40>)
 8000466:	785b      	ldrb	r3, [r3, #1]
 8000468:	2b02      	cmp	r3, #2
 800046a:	d10e      	bne.n	800048a <FSM_ProcessingModifyButton+0x32>
		modbtn_counter--;
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <FSM_ProcessingModifyButton+0x44>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <FSM_ProcessingModifyButton+0x44>)
 8000474:	6013      	str	r3, [r2, #0]
		if (modbtn_counter <= 0) {
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <FSM_ProcessingModifyButton+0x44>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	dc08      	bgt.n	8000490 <FSM_ProcessingModifyButton+0x38>
			modbtn_counter = DURATION_FOR_INCREASE / CYCLE;
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <FSM_ProcessingModifyButton+0x44>)
 8000480:	2214      	movs	r2, #20
 8000482:	601a      	str	r2, [r3, #0]
			FSM_IncreasingValue();
 8000484:	f7ff fed4 	bl	8000230 <FSM_IncreasingValue>
		}
	} else {
		modbtn_counter = DURATION_FOR_INCREASE / CYCLE;
	}
}
 8000488:	e002      	b.n	8000490 <FSM_ProcessingModifyButton+0x38>
		modbtn_counter = DURATION_FOR_INCREASE / CYCLE;
 800048a:	4b04      	ldr	r3, [pc, #16]	; (800049c <FSM_ProcessingModifyButton+0x44>)
 800048c:	2214      	movs	r2, #20
 800048e:	601a      	str	r2, [r3, #0]
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08000231 	.word	0x08000231
 8000498:	20000050 	.word	0x20000050
 800049c:	20000058 	.word	0x20000058

080004a0 <FSM_ProcessingSelectModeButton>:
void FSM_ProcessingSelectModeButton(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	FSM_ForInputProcessing(FSM_ChangingMode, SEL_BTN);
 80004a4:	2102      	movs	r1, #2
 80004a6:	4802      	ldr	r0, [pc, #8]	; (80004b0 <FSM_ProcessingSelectModeButton+0x10>)
 80004a8:	f7ff ff74 	bl	8000394 <FSM_ForInputProcessing>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	08000285 	.word	0x08000285

080004b4 <FSM_TrafficLight>:


void FSM_TrafficLight(const short index){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
	light_counter[index]--;
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	4a3b      	ldr	r2, [pc, #236]	; (80005b0 <FSM_TrafficLight+0xfc>)
 80004c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c8:	3a01      	subs	r2, #1
 80004ca:	4939      	ldr	r1, [pc, #228]	; (80005b0 <FSM_TrafficLight+0xfc>)
 80004cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	switch (ledState[index]){
 80004d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004d4:	4a37      	ldr	r2, [pc, #220]	; (80005b4 <FSM_TrafficLight+0x100>)
 80004d6:	5cd3      	ldrb	r3, [r2, r3]
 80004d8:	2b06      	cmp	r3, #6
 80004da:	d042      	beq.n	8000562 <FSM_TrafficLight+0xae>
 80004dc:	2b06      	cmp	r3, #6
 80004de:	dc63      	bgt.n	80005a8 <FSM_TrafficLight+0xf4>
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d002      	beq.n	80004ea <FSM_TrafficLight+0x36>
 80004e4:	2b05      	cmp	r3, #5
 80004e6:	d01e      	beq.n	8000526 <FSM_TrafficLight+0x72>
			light_counter[index] = durationAmber * SECOND / CYCLE;
			ledState[index] = AMBER;
		}
		break;
	}
}
 80004e8:	e05e      	b.n	80005a8 <FSM_TrafficLight+0xf4>
		WritePinLED(index, RED);
 80004ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004ee:	2103      	movs	r1, #3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fd5b 	bl	8000fac <WritePinLED>
		if (light_counter[index] <= 0) {
 80004f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004fa:	4a2d      	ldr	r2, [pc, #180]	; (80005b0 <FSM_TrafficLight+0xfc>)
 80004fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000500:	2b00      	cmp	r3, #0
 8000502:	dc4c      	bgt.n	800059e <FSM_TrafficLight+0xea>
			light_counter[index] = durationGreen * SECOND / CYCLE;
 8000504:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <FSM_TrafficLight+0x104>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800050e:	2264      	movs	r2, #100	; 0x64
 8000510:	fb01 f202 	mul.w	r2, r1, r2
 8000514:	4926      	ldr	r1, [pc, #152]	; (80005b0 <FSM_TrafficLight+0xfc>)
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ledState[index] = GREEN;
 800051a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800051e:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <FSM_TrafficLight+0x100>)
 8000520:	2106      	movs	r1, #6
 8000522:	54d1      	strb	r1, [r2, r3]
		break;
 8000524:	e03b      	b.n	800059e <FSM_TrafficLight+0xea>
		WritePinLED(index, AMBER);
 8000526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800052a:	2105      	movs	r1, #5
 800052c:	4618      	mov	r0, r3
 800052e:	f000 fd3d 	bl	8000fac <WritePinLED>
		if (light_counter[index] <= 0) {
 8000532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000536:	4a1e      	ldr	r2, [pc, #120]	; (80005b0 <FSM_TrafficLight+0xfc>)
 8000538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800053c:	2b00      	cmp	r3, #0
 800053e:	dc30      	bgt.n	80005a2 <FSM_TrafficLight+0xee>
			light_counter[index] = durationRed * SECOND / CYCLE;
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <FSM_TrafficLight+0x108>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800054a:	2264      	movs	r2, #100	; 0x64
 800054c:	fb01 f202 	mul.w	r2, r1, r2
 8000550:	4917      	ldr	r1, [pc, #92]	; (80005b0 <FSM_TrafficLight+0xfc>)
 8000552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ledState[index] = RED;
 8000556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <FSM_TrafficLight+0x100>)
 800055c:	2103      	movs	r1, #3
 800055e:	54d1      	strb	r1, [r2, r3]
		break;
 8000560:	e01f      	b.n	80005a2 <FSM_TrafficLight+0xee>
		WritePinLED(index, GREEN);
 8000562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000566:	2106      	movs	r1, #6
 8000568:	4618      	mov	r0, r3
 800056a:	f000 fd1f 	bl	8000fac <WritePinLED>
		if (light_counter[index] <= 0) {
 800056e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000572:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <FSM_TrafficLight+0xfc>)
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	2b00      	cmp	r3, #0
 800057a:	dc14      	bgt.n	80005a6 <FSM_TrafficLight+0xf2>
			light_counter[index] = durationAmber * SECOND / CYCLE;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <FSM_TrafficLight+0x10c>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4619      	mov	r1, r3
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	2264      	movs	r2, #100	; 0x64
 8000588:	fb01 f202 	mul.w	r2, r1, r2
 800058c:	4908      	ldr	r1, [pc, #32]	; (80005b0 <FSM_TrafficLight+0xfc>)
 800058e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ledState[index] = AMBER;
 8000592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000596:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <FSM_TrafficLight+0x100>)
 8000598:	2105      	movs	r1, #5
 800059a:	54d1      	strb	r1, [r2, r3]
		break;
 800059c:	e003      	b.n	80005a6 <FSM_TrafficLight+0xf2>
		break;
 800059e:	bf00      	nop
 80005a0:	e002      	b.n	80005a8 <FSM_TrafficLight+0xf4>
		break;
 80005a2:	bf00      	nop
 80005a4:	e000      	b.n	80005a8 <FSM_TrafficLight+0xf4>
		break;
 80005a6:	bf00      	nop
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000040 	.word	0x20000040
 80005b4:	2000003c 	.word	0x2000003c
 80005b8:	2000004a 	.word	0x2000004a
 80005bc:	20000048 	.word	0x20000048
 80005c0:	20000049 	.word	0x20000049

080005c4 <FSM_ForProcessingState>:

void FSM_ForProcessingState(void){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	switch (runState){
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <FSM_ForProcessingState+0xa0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3b01      	subs	r3, #1
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d846      	bhi.n	8000660 <FSM_ForProcessingState+0x9c>
 80005d2:	a201      	add	r2, pc, #4	; (adr r2, 80005d8 <FSM_ForProcessingState+0x14>)
 80005d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d8:	080005e9 	.word	0x080005e9
 80005dc:	080005f7 	.word	0x080005f7
 80005e0:	08000617 	.word	0x08000617
 80005e4:	08000637 	.word	0x08000637
	case NORMAL_MODE:
		FSM_TrafficLight(0);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff ff63 	bl	80004b4 <FSM_TrafficLight>
		FSM_TrafficLight(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff60 	bl	80004b4 <FSM_TrafficLight>
		break;
 80005f4:	e034      	b.n	8000660 <FSM_ForProcessingState+0x9c>
	case MODIFY_DURATION_RED_MODE:
		//Blinking Red LED in 0.5s
		general_counter--;
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <FSM_ForProcessingState+0xa4>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <FSM_ForProcessingState+0xa4>)
 80005fe:	6013      	str	r3, [r2, #0]
		if (general_counter <= 0) {
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <FSM_ForProcessingState+0xa4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	dc26      	bgt.n	8000656 <FSM_ForProcessingState+0x92>
			general_counter = HALF_SECOND / CYCLE;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <FSM_ForProcessingState+0xa4>)
 800060a:	2232      	movs	r2, #50	; 0x32
 800060c:	601a      	str	r2, [r3, #0]
			TogglePinLED(RED);
 800060e:	2003      	movs	r0, #3
 8000610:	f000 fd1a 	bl	8001048 <TogglePinLED>
		}
		break;
 8000614:	e01f      	b.n	8000656 <FSM_ForProcessingState+0x92>
	case MODIFY_DURATION_AMBER_MODE:
		//Blinking Amber LED in 0.5s
		general_counter--;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <FSM_ForProcessingState+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <FSM_ForProcessingState+0xa4>)
 800061e:	6013      	str	r3, [r2, #0]
		if (general_counter <= 0) {
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <FSM_ForProcessingState+0xa4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dc18      	bgt.n	800065a <FSM_ForProcessingState+0x96>
			general_counter = HALF_SECOND / CYCLE;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <FSM_ForProcessingState+0xa4>)
 800062a:	2232      	movs	r2, #50	; 0x32
 800062c:	601a      	str	r2, [r3, #0]
			TogglePinLED(AMBER);
 800062e:	2005      	movs	r0, #5
 8000630:	f000 fd0a 	bl	8001048 <TogglePinLED>
		}
		break;
 8000634:	e011      	b.n	800065a <FSM_ForProcessingState+0x96>
	case MODIFY_DURATION_GREEN_MODE:
		//Blinking Green LED in 0.5s
		general_counter--;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <FSM_ForProcessingState+0xa4>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <FSM_ForProcessingState+0xa4>)
 800063e:	6013      	str	r3, [r2, #0]
		if (general_counter <= 0) {
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <FSM_ForProcessingState+0xa4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc0a      	bgt.n	800065e <FSM_ForProcessingState+0x9a>
			general_counter = HALF_SECOND / CYCLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <FSM_ForProcessingState+0xa4>)
 800064a:	2232      	movs	r2, #50	; 0x32
 800064c:	601a      	str	r2, [r3, #0]
			TogglePinLED(GREEN);
 800064e:	2006      	movs	r0, #6
 8000650:	f000 fcfa 	bl	8001048 <TogglePinLED>
		}
		break;
 8000654:	e003      	b.n	800065e <FSM_ForProcessingState+0x9a>
		break;
 8000656:	bf00      	nop
 8000658:	e002      	b.n	8000660 <FSM_ForProcessingState+0x9c>
		break;
 800065a:	bf00      	nop
 800065c:	e000      	b.n	8000660 <FSM_ForProcessingState+0x9c>
		break;
 800065e:	bf00      	nop
	}
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000038 	.word	0x20000038
 8000668:	20000054 	.word	0x20000054

0800066c <Input_Reading_Init>:
//static GPIO_PinState debounceBuffer2[NO_OF_BUTTON];

static uint8_t flagPressedOneSec[NO_OF_BUTTON];
static short counterPressedOneSec[NO_OF_BUTTON];

void Input_Reading_Init(void){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
	for(short i = 0; i < NO_OF_BUTTON; i++){
 8000672:	2300      	movs	r3, #0
 8000674:	80fb      	strh	r3, [r7, #6]
 8000676:	e021      	b.n	80006bc <Input_Reading_Init+0x50>
		filteredBuffer[i] = debounceBuffer0[i] = debounceBuffer1[i] = BUTTON_RELEASED;
 8000678:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <Input_Reading_Init+0x64>)
 800067e:	2101      	movs	r1, #1
 8000680:	5499      	strb	r1, [r3, r2]
 8000682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000686:	4912      	ldr	r1, [pc, #72]	; (80006d0 <Input_Reading_Init+0x64>)
 8000688:	5c89      	ldrb	r1, [r1, r2]
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <Input_Reading_Init+0x68>)
 800068c:	54d1      	strb	r1, [r2, r3]
 800068e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000692:	4910      	ldr	r1, [pc, #64]	; (80006d4 <Input_Reading_Init+0x68>)
 8000694:	5cc9      	ldrb	r1, [r1, r3]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <Input_Reading_Init+0x6c>)
 8000698:	5499      	strb	r1, [r3, r2]
		flagPressedOneSec[i] = 0;
 800069a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <Input_Reading_Init+0x70>)
 80006a0:	2100      	movs	r1, #0
 80006a2:	54d1      	strb	r1, [r2, r3]
		counterPressedOneSec[i] = COUNTER_FOR_PRESSING_ONE_SEC;
 80006a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <Input_Reading_Init+0x74>)
 80006aa:	2164      	movs	r1, #100	; 0x64
 80006ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(short i = 0; i < NO_OF_BUTTON; i++){
 80006b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	3301      	adds	r3, #1
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	80fb      	strh	r3, [r7, #6]
 80006bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	ddd9      	ble.n	8000678 <Input_Reading_Init+0xc>
	}
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr
 80006d0:	20000064 	.word	0x20000064
 80006d4:	20000060 	.word	0x20000060
 80006d8:	2000005c 	.word	0x2000005c
 80006dc:	20000068 	.word	0x20000068
 80006e0:	2000006c 	.word	0x2000006c

080006e4 <IsIndexValid>:

uint8_t IsIndexValid(const short index){
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
	return (index >= 0 && index < NO_OF_BUTTON);
 80006ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	db05      	blt.n	8000702 <IsIndexValid+0x1e>
 80006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	dc01      	bgt.n	8000702 <IsIndexValid+0x1e>
 80006fe:	2301      	movs	r3, #1
 8000700:	e000      	b.n	8000704 <IsIndexValid+0x20>
 8000702:	2300      	movs	r3, #0
 8000704:	b2db      	uxtb	r3, r3
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <IsButtonPressed>:

uint8_t IsButtonPressed(const short index){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
	if (!IsIndexValid(index)) return -1;
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ffe0 	bl	80006e4 <IsIndexValid>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d101      	bne.n	800072e <IsButtonPressed+0x1e>
 800072a:	23ff      	movs	r3, #255	; 0xff
 800072c:	e008      	b.n	8000740 <IsButtonPressed+0x30>
	return (filteredBuffer[index] == BUTTON_PRESSED);
 800072e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <IsButtonPressed+0x38>)
 8000734:	5cd3      	ldrb	r3, [r2, r3]
 8000736:	2b00      	cmp	r3, #0
 8000738:	bf0c      	ite	eq
 800073a:	2301      	moveq	r3, #1
 800073c:	2300      	movne	r3, #0
 800073e:	b2db      	uxtb	r3, r3
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000005c 	.word	0x2000005c

0800074c <IsButtonPressedOneSec>:
uint8_t IsButtonPressedOneSec(const short index){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	if (!IsIndexValid(index)) return -1;
 8000756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffc2 	bl	80006e4 <IsIndexValid>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <IsButtonPressedOneSec+0x1e>
 8000766:	23ff      	movs	r3, #255	; 0xff
 8000768:	e003      	b.n	8000772 <IsButtonPressedOneSec+0x26>
	return flagPressedOneSec[index];
 800076a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800076e:	4a03      	ldr	r2, [pc, #12]	; (800077c <IsButtonPressedOneSec+0x30>)
 8000770:	5cd3      	ldrb	r3, [r2, r3]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000068 	.word	0x20000068

08000780 <ButtonReading>:

//Just save 2 latest states instead of 3. It can make HandleIT function more lighter.
void ButtonReading(const short index){
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	80fb      	strh	r3, [r7, #6]
	if (!IsIndexValid(index)) return;
 800078a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffa8 	bl	80006e4 <IsIndexValid>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d059      	beq.n	800084e <ButtonReading+0xce>
	//Save 2 latest states
	//debounceBuffer2[index] = debounceBuffer1[index];
	debounceBuffer1[index] = debounceBuffer0[index];
 800079a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800079e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a2:	492d      	ldr	r1, [pc, #180]	; (8000858 <ButtonReading+0xd8>)
 80007a4:	5c89      	ldrb	r1, [r1, r2]
 80007a6:	4a2d      	ldr	r2, [pc, #180]	; (800085c <ButtonReading+0xdc>)
 80007a8:	54d1      	strb	r1, [r2, r3]
	debounceBuffer0[index] = HAL_GPIO_ReadPin(GPIO_Port[index], GPIO_Pin[index]);
 80007aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ae:	4a2c      	ldr	r2, [pc, #176]	; (8000860 <ButtonReading+0xe0>)
 80007b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b8:	492a      	ldr	r1, [pc, #168]	; (8000864 <ButtonReading+0xe4>)
 80007ba:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f000 ff9c 	bl	8001704 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <ButtonReading+0xd8>)
 80007d2:	551a      	strb	r2, [r3, r4]

	//If all saved states equal -> filtered
	if(//debounceBuffer2[index] == debounceBuffer1[index] &&
		debounceBuffer1[index] == debounceBuffer0[index]){
 80007d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d8:	4a20      	ldr	r2, [pc, #128]	; (800085c <ButtonReading+0xdc>)
 80007da:	5cd2      	ldrb	r2, [r2, r3]
 80007dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e0:	491d      	ldr	r1, [pc, #116]	; (8000858 <ButtonReading+0xd8>)
 80007e2:	5ccb      	ldrb	r3, [r1, r3]
	if(//debounceBuffer2[index] == debounceBuffer1[index] &&
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d133      	bne.n	8000850 <ButtonReading+0xd0>
		filteredBuffer[index] = debounceBuffer0[index];
 80007e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f0:	4919      	ldr	r1, [pc, #100]	; (8000858 <ButtonReading+0xd8>)
 80007f2:	5c89      	ldrb	r1, [r1, r2]
 80007f4:	4a1c      	ldr	r2, [pc, #112]	; (8000868 <ButtonReading+0xe8>)
 80007f6:	54d1      	strb	r1, [r2, r3]
		if (filteredBuffer[index] == BUTTON_PRESSED){
 80007f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fc:	4a1a      	ldr	r2, [pc, #104]	; (8000868 <ButtonReading+0xe8>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d118      	bne.n	8000836 <ButtonReading+0xb6>
			counterPressedOneSec[index]--;
 8000804:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000808:	4a18      	ldr	r2, [pc, #96]	; (800086c <ButtonReading+0xec>)
 800080a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800080e:	b292      	uxth	r2, r2
 8000810:	3a01      	subs	r2, #1
 8000812:	b292      	uxth	r2, r2
 8000814:	b211      	sxth	r1, r2
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <ButtonReading+0xec>)
 8000818:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (counterPressedOneSec[index] <= 0){
 800081c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000820:	4a12      	ldr	r2, [pc, #72]	; (800086c <ButtonReading+0xec>)
 8000822:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000826:	2b00      	cmp	r3, #0
 8000828:	dc12      	bgt.n	8000850 <ButtonReading+0xd0>
				flagPressedOneSec[index] = 1;
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	4a10      	ldr	r2, [pc, #64]	; (8000870 <ButtonReading+0xf0>)
 8000830:	2101      	movs	r1, #1
 8000832:	54d1      	strb	r1, [r2, r3]
 8000834:	e00c      	b.n	8000850 <ButtonReading+0xd0>
			}
		} else {
			counterPressedOneSec[index] = COUNTER_FOR_PRESSING_ONE_SEC;
 8000836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083a:	4a0c      	ldr	r2, [pc, #48]	; (800086c <ButtonReading+0xec>)
 800083c:	2164      	movs	r1, #100	; 0x64
 800083e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagPressedOneSec[index] = 0;
 8000842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ButtonReading+0xf0>)
 8000848:	2100      	movs	r1, #0
 800084a:	54d1      	strb	r1, [r2, r3]
 800084c:	e000      	b.n	8000850 <ButtonReading+0xd0>
	if (!IsIndexValid(index)) return;
 800084e:	bf00      	nop
		}
	}
}
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}
 8000856:	bf00      	nop
 8000858:	20000060 	.word	0x20000060
 800085c:	20000064 	.word	0x20000064
 8000860:	20000000 	.word	0x20000000
 8000864:	08002790 	.word	0x08002790
 8000868:	2000005c 	.word	0x2000005c
 800086c:	2000006c 	.word	0x2000006c
 8000870:	20000068 	.word	0x20000068

08000874 <LED7SEG_Init>:
};

uint8_t buffer7SEG[TOTAL_LED];
short led_index;

void LED7SEG_Init(void){
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	for (short i = 0; i < TOTAL_LED; i++){
 800087a:	2300      	movs	r3, #0
 800087c:	80fb      	strh	r3, [r7, #6]
 800087e:	e015      	b.n	80008ac <LED7SEG_Init+0x38>
		buffer7SEG[i] = 0;
 8000880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000884:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <LED7SEG_Init+0x50>)
 8000886:	2100      	movs	r1, #0
 8000888:	54d1      	strb	r1, [r2, r3]
		HAL_GPIO_WritePin(EN_GPIO, EN_PIN[i], TURN_OFF_LED);
 800088a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088e:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LED7SEG_Init+0x54>)
 8000890:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000894:	b29b      	uxth	r3, r3
 8000896:	2201      	movs	r2, #1
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <LED7SEG_Init+0x58>)
 800089c:	f000 ff49 	bl	8001732 <HAL_GPIO_WritePin>
	for (short i = 0; i < TOTAL_LED; i++){
 80008a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	80fb      	strh	r3, [r7, #6]
 80008ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	dde5      	ble.n	8000880 <LED7SEG_Init+0xc>
	}
	led_index = TOTAL_LED - 1;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <LED7SEG_Init+0x5c>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	801a      	strh	r2, [r3, #0]
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000074 	.word	0x20000074
 80008c8:	08002798 	.word	0x08002798
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	2000007a 	.word	0x2000007a

080008d4 <UpdateBuffer7SEG>:

void UpdateBuffer7SEG(void){
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
	short first;
	short second;
	switch(runState){
 80008da:	4b3c      	ldr	r3, [pc, #240]	; (80009cc <UpdateBuffer7SEG+0xf8>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	3b01      	subs	r3, #1
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d830      	bhi.n	8000946 <UpdateBuffer7SEG+0x72>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <UpdateBuffer7SEG+0x18>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000923 	.word	0x08000923
 80008f4:	0800092f 	.word	0x0800092f
 80008f8:	0800093b 	.word	0x0800093b
	case NORMAL_MODE:
		first = light_counter[0] / 100;
 80008fc:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <UpdateBuffer7SEG+0xfc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a34      	ldr	r2, [pc, #208]	; (80009d4 <UpdateBuffer7SEG+0x100>)
 8000902:	fb82 1203 	smull	r1, r2, r2, r3
 8000906:	1152      	asrs	r2, r2, #5
 8000908:	17db      	asrs	r3, r3, #31
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	80fb      	strh	r3, [r7, #6]
		second = light_counter[1] / 100;
 800090e:	4b30      	ldr	r3, [pc, #192]	; (80009d0 <UpdateBuffer7SEG+0xfc>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	4a30      	ldr	r2, [pc, #192]	; (80009d4 <UpdateBuffer7SEG+0x100>)
 8000914:	fb82 1203 	smull	r1, r2, r2, r3
 8000918:	1152      	asrs	r2, r2, #5
 800091a:	17db      	asrs	r3, r3, #31
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	80bb      	strh	r3, [r7, #4]
		break;
 8000920:	e011      	b.n	8000946 <UpdateBuffer7SEG+0x72>
	case MODIFY_DURATION_RED_MODE:
		first = second = temp_duRed;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <UpdateBuffer7SEG+0x104>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	80bb      	strh	r3, [r7, #4]
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	80fb      	strh	r3, [r7, #6]
		break;
 800092c:	e00b      	b.n	8000946 <UpdateBuffer7SEG+0x72>
	case MODIFY_DURATION_AMBER_MODE:
		first = second = temp_duAmber;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <UpdateBuffer7SEG+0x108>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	80bb      	strh	r3, [r7, #4]
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	80fb      	strh	r3, [r7, #6]
		break;
 8000938:	e005      	b.n	8000946 <UpdateBuffer7SEG+0x72>
	case MODIFY_DURATION_GREEN_MODE:
		first = second = temp_duGreen;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <UpdateBuffer7SEG+0x10c>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	80bb      	strh	r3, [r7, #4]
 8000940:	88bb      	ldrh	r3, [r7, #4]
 8000942:	80fb      	strh	r3, [r7, #6]
		break;
 8000944:	bf00      	nop
	}
	buffer7SEG[0] = first / 10;
 8000946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800094a:	4a26      	ldr	r2, [pc, #152]	; (80009e4 <UpdateBuffer7SEG+0x110>)
 800094c:	fb82 1203 	smull	r1, r2, r2, r3
 8000950:	1092      	asrs	r2, r2, #2
 8000952:	17db      	asrs	r3, r3, #31
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b21b      	sxth	r3, r3
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <UpdateBuffer7SEG+0x114>)
 800095c:	701a      	strb	r2, [r3, #0]
    buffer7SEG[1] = first % 10;
 800095e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <UpdateBuffer7SEG+0x110>)
 8000964:	fb83 1302 	smull	r1, r3, r3, r2
 8000968:	1099      	asrs	r1, r3, #2
 800096a:	17d3      	asrs	r3, r2, #31
 800096c:	1ac9      	subs	r1, r1, r3
 800096e:	460b      	mov	r3, r1
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	440b      	add	r3, r1
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b21b      	sxth	r3, r3
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <UpdateBuffer7SEG+0x114>)
 800097e:	705a      	strb	r2, [r3, #1]
    buffer7SEG[2] = second / 10;
 8000980:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000984:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <UpdateBuffer7SEG+0x110>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1092      	asrs	r2, r2, #2
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	b21b      	sxth	r3, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <UpdateBuffer7SEG+0x114>)
 8000996:	709a      	strb	r2, [r3, #2]
    buffer7SEG[3] = second % 10;
 8000998:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <UpdateBuffer7SEG+0x110>)
 800099e:	fb83 1302 	smull	r1, r3, r3, r2
 80009a2:	1099      	asrs	r1, r3, #2
 80009a4:	17d3      	asrs	r3, r2, #31
 80009a6:	1ac9      	subs	r1, r1, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	440b      	add	r3, r1
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <UpdateBuffer7SEG+0x114>)
 80009b8:	70da      	strb	r2, [r3, #3]
    buffer7SEG[4] = runState;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <UpdateBuffer7SEG+0xf8>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <UpdateBuffer7SEG+0x114>)
 80009c0:	711a      	strb	r2, [r3, #4]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	20000038 	.word	0x20000038
 80009d0:	20000040 	.word	0x20000040
 80009d4:	51eb851f 	.word	0x51eb851f
 80009d8:	2000004b 	.word	0x2000004b
 80009dc:	2000004c 	.word	0x2000004c
 80009e0:	2000004d 	.word	0x2000004d
 80009e4:	66666667 	.word	0x66666667
 80009e8:	20000074 	.word	0x20000074

080009ec <UpdateDatabus7SEG>:

void UpdateDatabus7SEG(const short index){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
	uint8_t num = buffer7SEG[index];
 80009f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fa:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <UpdateDatabus7SEG+0xd4>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	73fb      	strb	r3, [r7, #15]
	if (num > 9 || num < 0) return;
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b09      	cmp	r3, #9
 8000a04:	d858      	bhi.n	8000ab8 <UpdateDatabus7SEG+0xcc>
	uint8_t temp = b[num];
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <UpdateDatabus7SEG+0xd8>)
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_G_Pin, temp % 2);
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a1e:	f000 fe88 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_F_Pin, temp % 2);
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a38:	f000 fe7b 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a3c:	7bbb      	ldrb	r3, [r7, #14]
 8000a3e:	085b      	lsrs	r3, r3, #1
 8000a40:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_E_Pin, temp % 2);
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a52:	f000 fe6e 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	085b      	lsrs	r3, r3, #1
 8000a5a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_D_Pin, temp % 2);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a6a:	f000 fe62 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	085b      	lsrs	r3, r3, #1
 8000a72:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_C_Pin, temp % 2);
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	2140      	movs	r1, #64	; 0x40
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a82:	f000 fe56 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_B_Pin, temp % 2);
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	2120      	movs	r1, #32
 8000a98:	480b      	ldr	r0, [pc, #44]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000a9a:	f000 fe4a 	bl	8001732 <HAL_GPIO_WritePin>
	temp /= 2;
 8000a9e:	7bbb      	ldrb	r3, [r7, #14]
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(DataBus7SEG_GPIO, S7_A_Pin, temp % 2);
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	461a      	mov	r2, r3
 8000aae:	2110      	movs	r1, #16
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <UpdateDatabus7SEG+0xdc>)
 8000ab2:	f000 fe3e 	bl	8001732 <HAL_GPIO_WritePin>
 8000ab6:	e000      	b.n	8000aba <UpdateDatabus7SEG+0xce>
	if (num > 9 || num < 0) return;
 8000ab8:	bf00      	nop
}
 8000aba:	3710      	adds	r7, #16
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000074 	.word	0x20000074
 8000ac4:	080027a4 	.word	0x080027a4
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <Scanning7SEG>:
void Scanning7SEG(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//Turn off previous LED.
	HAL_GPIO_WritePin(EN_GPIO, EN_PIN[led_index], TURN_OFF_LED);
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <Scanning7SEG+0x70>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <Scanning7SEG+0x74>)
 8000ada:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4817      	ldr	r0, [pc, #92]	; (8000b44 <Scanning7SEG+0x78>)
 8000ae6:	f000 fe24 	bl	8001732 <HAL_GPIO_WritePin>

	//Move another LED
	led_index++;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <Scanning7SEG+0x70>)
 8000aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <Scanning7SEG+0x70>)
 8000afa:	801a      	strh	r2, [r3, #0]
	if (led_index >= TOTAL_LED) {
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <Scanning7SEG+0x70>)
 8000afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	dd02      	ble.n	8000b0c <Scanning7SEG+0x40>
		led_index = 0;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <Scanning7SEG+0x70>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	801a      	strh	r2, [r3, #0]
	}
	//Update Buffer
	UpdateBuffer7SEG();
 8000b0c:	f7ff fee2 	bl	80008d4 <UpdateBuffer7SEG>

	//Update Databus
	UpdateDatabus7SEG(led_index);
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <Scanning7SEG+0x70>)
 8000b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f7ff ff68 	bl	80009ec <UpdateDatabus7SEG>

	//Turn on current LED
	HAL_GPIO_WritePin(EN_GPIO, EN_PIN[led_index], TURN_ON_LED);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <Scanning7SEG+0x70>)
 8000b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b22:	461a      	mov	r2, r3
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <Scanning7SEG+0x74>)
 8000b26:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <Scanning7SEG+0x78>)
 8000b32:	f000 fdfe 	bl	8001732 <HAL_GPIO_WritePin>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2000007a 	.word	0x2000007a
 8000b40:	08002798 	.word	0x08002798
 8000b44:	40010c00 	.word	0x40010c00

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 faee 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f842 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8c8 	bl	8000ce8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b58:	f000 f87a 	bl	8000c50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b5c:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <main+0x8c>)
 8000b5e:	f001 fa47 	bl	8001ff0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Input_Reading_Init();
 8000b62:	f7ff fd83 	bl	800066c <Input_Reading_Init>
  Input_Processing_Init();
 8000b66:	f7ff fb31 	bl	80001cc <Input_Processing_Init>
  LED7SEG_Init();
 8000b6a:	f7ff fe83 	bl	8000874 <LED7SEG_Init>
  Global_Init();
 8000b6e:	f7ff fb17 	bl	80001a0 <Global_Init>

  SetTimer(DURATION_FOR_EACH_READING, TIMER_FOR_READING);
 8000b72:	2100      	movs	r1, #0
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 f9a9 	bl	8000ecc <SetTimer>
  SetTimer(DURATION_FOR_EACH_DISPLAYING_LED, TIMER_FOR_DISPLAYING_LED);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	200a      	movs	r0, #10
 8000b7e:	f000 f9a5 	bl	8000ecc <SetTimer>
  while (1)
  {
	  if (GetFlagTimer(TIMER_FOR_READING)){
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f9c6 	bl	8000f14 <GetFlagTimer>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d014      	beq.n	8000bb8 <main+0x70>
		  //Reset timer
		  SetTimer(DURATION_FOR_EACH_READING, TIMER_FOR_READING);
 8000b8e:	2100      	movs	r1, #0
 8000b90:	200a      	movs	r0, #10
 8000b92:	f000 f99b 	bl	8000ecc <SetTimer>

		  //Reading
		  ButtonReading(SET_BTN);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fdf2 	bl	8000780 <ButtonReading>
		  ButtonReading(MOD_BTN);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fdef 	bl	8000780 <ButtonReading>
		  ButtonReading(SEL_BTN);
 8000ba2:	2002      	movs	r0, #2
 8000ba4:	f7ff fdec 	bl	8000780 <ButtonReading>

		  //Input Processing
		  FSM_ProcessingSetValueButton();
 8000ba8:	f7ff fc4c 	bl	8000444 <FSM_ProcessingSetValueButton>
		  FSM_ProcessingModifyButton();
 8000bac:	f7ff fc54 	bl	8000458 <FSM_ProcessingModifyButton>
		  FSM_ProcessingSelectModeButton();
 8000bb0:	f7ff fc76 	bl	80004a0 <FSM_ProcessingSelectModeButton>

		  //State Processing
		  FSM_ForProcessingState();
 8000bb4:	f7ff fd06 	bl	80005c4 <FSM_ForProcessingState>
	  }

	  //Display 7 SEG LEDs
	  if (GetFlagTimer(TIMER_FOR_DISPLAYING_LED)){
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 f9ab 	bl	8000f14 <GetFlagTimer>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0de      	beq.n	8000b82 <main+0x3a>
		  //Reset timer
		  SetTimer(DURATION_FOR_EACH_DISPLAYING_LED, TIMER_FOR_DISPLAYING_LED);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	200a      	movs	r0, #10
 8000bc8:	f000 f980 	bl	8000ecc <SetTimer>

		  Scanning7SEG();
 8000bcc:	f7ff ff7e 	bl	8000acc <Scanning7SEG>
	  if (GetFlagTimer(TIMER_FOR_READING)){
 8000bd0:	e7d7      	b.n	8000b82 <main+0x3a>
 8000bd2:	bf00      	nop
 8000bd4:	2000007c 	.word	0x2000007c

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	; 0x40
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	2228      	movs	r2, #40	; 0x28
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 fdbe 	bl	8002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c02:	2310      	movs	r3, #16
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 fdc0 	bl	8001794 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c1a:	f000 f8d3 	bl	8000dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 f82e 	bl	8001c98 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c42:	f000 f8bf 	bl	8000dc4 <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3740      	adds	r7, #64	; 0x40
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	463b      	mov	r3, r7
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c76:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c84:	2209      	movs	r2, #9
 8000c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000c96:	f001 f95b 	bl	8001f50 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ca0:	f000 f890 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000cb2:	f001 faf1 	bl	8002298 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cbc:	f000 f882 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM2_Init+0x94>)
 8000cce:	f001 fcbd 	bl	800264c <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 f874 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000007c 	.word	0x2000007c

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_GPIO_Init+0xbc>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0308 	and.w	r3, r3, #8
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Single_LED_Pin|RED1_Pin|AMBER1_Pin|GREEN1_Pin
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8000d32:	481d      	ldr	r0, [pc, #116]	; (8000da8 <MX_GPIO_Init+0xc0>)
 8000d34:	f000 fcfd 	bl	8001732 <HAL_GPIO_WritePin>
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|S7_G_Pin
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f244 71ff 	movw	r1, #18431	; 0x47ff
 8000d3e:	481b      	ldr	r0, [pc, #108]	; (8000dac <MX_GPIO_Init+0xc4>)
 8000d40:	f000 fcf7 	bl	8001732 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN3_Pin|S7_A_Pin|S7_B_Pin
                          |S7_C_Pin|S7_D_Pin|S7_E_Pin|S7_F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Single_LED_Pin RED1_Pin AMBER1_Pin GREEN1_Pin
                           RED2_Pin AMBER2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = Single_LED_Pin|RED1_Pin|AMBER1_Pin|GREEN1_Pin
 8000d44:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8000d48:	60bb      	str	r3, [r7, #8]
                          |RED2_Pin|AMBER2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2302      	movs	r3, #2
 8000d54:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <MX_GPIO_Init+0xc0>)
 8000d5e:	f000 fb55 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin S7_G_Pin
                           EN4_Pin EN3_Pin S7_A_Pin S7_B_Pin
                           S7_C_Pin S7_D_Pin S7_E_Pin S7_F_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|S7_G_Pin
 8000d62:	f244 73ff 	movw	r3, #18431	; 0x47ff
 8000d66:	60bb      	str	r3, [r7, #8]
                          |EN4_Pin|EN3_Pin|S7_A_Pin|S7_B_Pin
                          |S7_C_Pin|S7_D_Pin|S7_E_Pin|S7_F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	; (8000dac <MX_GPIO_Init+0xc4>)
 8000d7c:	f000 fb46 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL_BTN_Pin MOD_BTN_Pin SET_BTN_Pin */
  GPIO_InitStruct.Pin = SEL_BTN_Pin|MOD_BTN_Pin|SET_BTN_Pin;
 8000d80:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0xc4>)
 8000d96:	f000 fb39 	bl	800140c <HAL_GPIO_Init>

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	AllTimerRun();
 8000db8:	f000 f8ee 	bl	8000f98 <AllTimerRun>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_MspInit+0x40>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_MspInit+0x40>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_MspInit+0x40>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_MspInit+0x40>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_MspInit+0x40>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_MspInit+0x40>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	201c      	movs	r0, #28
 8000e44:	f000 faab 	bl	800139e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	201c      	movs	r0, #28
 8000e4a:	f000 fac4 	bl	80013d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f989 	bl	80011b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f001 f8e9 	bl	8002088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000007c 	.word	0x2000007c

08000ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <SetTimer>:
#include "timer.h"

short counter[NO_OF_TIMER];
short flagTimer[NO_OF_TIMER];

void SetTimer(const int duration, const short index){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
	counter[index] = duration / TIMER_CYCLE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <SetTimer+0x3c>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad2      	subs	r2, r2, r3
 8000ee6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000eea:	b211      	sxth	r1, r2
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <SetTimer+0x40>)
 8000eee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	flagTimer[index] = 0;
 8000ef2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ef6:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <SetTimer+0x44>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	66666667 	.word	0x66666667
 8000f0c:	200000c4 	.word	0x200000c4
 8000f10:	200000c8 	.word	0x200000c8

08000f14 <GetFlagTimer>:
short GetFlagTimer(const short index){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	return flagTimer[index];
 8000f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <GetFlagTimer+0x20>)
 8000f24:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	200000c8 	.word	0x200000c8

08000f38 <TimerRun>:
void TimerRun(const short index){
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
	if (counter[index] <= 0) return;
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <TimerRun+0x58>)
 8000f48:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	dd19      	ble.n	8000f84 <TimerRun+0x4c>
	counter[index]--;
 8000f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <TimerRun+0x58>)
 8000f56:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	3a01      	subs	r2, #1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	b211      	sxth	r1, r2
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <TimerRun+0x58>)
 8000f64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if (counter[index] <= 0) {
 8000f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <TimerRun+0x58>)
 8000f6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	dc07      	bgt.n	8000f86 <TimerRun+0x4e>
		flagTimer[index] = 1;
 8000f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <TimerRun+0x5c>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000f82:	e000      	b.n	8000f86 <TimerRun+0x4e>
	if (counter[index] <= 0) return;
 8000f84:	bf00      	nop
	}
}
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200000c4 	.word	0x200000c4
 8000f94:	200000c8 	.word	0x200000c8

08000f98 <AllTimerRun>:

void AllTimerRun(void){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	TimerRun(TIMER_FOR_READING);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff ffcb 	bl	8000f38 <TimerRun>
	TimerRun(TIMER_FOR_DISPLAYING_LED);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff ffc8 	bl	8000f38 <TimerRun>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <WritePinLED>:
};

//State parameter is the state we will set for 3 LEDs of traffic light.
//RED - AMBER - GREEN <=> A - B - C
//Binary of state: xxxxxABC
void WritePinLED(const short index, uint8_t state){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * index + 2], state % 2);
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <WritePinLED+0x94>)
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	; (8001044 <WritePinLED+0x98>)
 8000fce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fd2:	b299      	uxth	r1, r3
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f000 fba8 	bl	8001732 <HAL_GPIO_WritePin>
	state /= 2;
 8000fe2:	797b      	ldrb	r3, [r7, #5]
 8000fe4:	085b      	lsrs	r3, r3, #1
 8000fe6:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * index + 1], state % 2);
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <WritePinLED+0x94>)
 8000fea:	6818      	ldr	r0, [r3, #0]
 8000fec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <WritePinLED+0x98>)
 8000ffa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	797b      	ldrb	r3, [r7, #5]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	f000 fb92 	bl	8001732 <HAL_GPIO_WritePin>
	state /= 2;
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * index], state % 2);
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <WritePinLED+0x94>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <WritePinLED+0x98>)
 8001024:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001028:	b299      	uxth	r1, r3
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	461a      	mov	r2, r3
 8001034:	f000 fb7d 	bl	8001732 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000010 	.word	0x20000010
 8001044:	080027c0 	.word	0x080027c0

08001048 <TogglePinLED>:

void TogglePinLED(uint8_t state){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	switch(state){
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b06      	cmp	r3, #6
 8001056:	d02a      	beq.n	80010ae <TogglePinLED+0x66>
 8001058:	2b06      	cmp	r3, #6
 800105a:	dc3b      	bgt.n	80010d4 <TogglePinLED+0x8c>
 800105c:	2b03      	cmp	r3, #3
 800105e:	d002      	beq.n	8001066 <TogglePinLED+0x1e>
 8001060:	2b05      	cmp	r3, #5
 8001062:	d012      	beq.n	800108a <TogglePinLED+0x42>
	case GREEN:
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[2]);
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * 1 + 2]);
		break;
	}
}
 8001064:	e036      	b.n	80010d4 <TogglePinLED+0x8c>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[0]);
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <TogglePinLED+0x94>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2240      	movs	r2, #64	; 0x40
 800106c:	b292      	uxth	r2, r2
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fb76 	bl	8001762 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * 1 + 0]);
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <TogglePinLED+0x94>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107e:	b292      	uxth	r2, r2
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fb6d 	bl	8001762 <HAL_GPIO_TogglePin>
		break;
 8001088:	e024      	b.n	80010d4 <TogglePinLED+0x8c>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[1]);
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <TogglePinLED+0x94>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	b292      	uxth	r2, r2
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fb64 	bl	8001762 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * 1 + 1]);
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <TogglePinLED+0x94>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a2:	b292      	uxth	r2, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fb5b 	bl	8001762 <HAL_GPIO_TogglePin>
		break;
 80010ac:	e012      	b.n	80010d4 <TogglePinLED+0x8c>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[2]);
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <TogglePinLED+0x94>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b6:	b292      	uxth	r2, r2
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f000 fb51 	bl	8001762 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(TrafficLightLED_GPIO, TrafficLightLED_Pin[3 * 1 + 2]);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <TogglePinLED+0x94>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c8:	b292      	uxth	r2, r2
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fb48 	bl	8001762 <HAL_GPIO_TogglePin>
		break;
 80010d2:	bf00      	nop
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000010 	.word	0x20000010

080010e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e0:	f7ff feee 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e4:	480b      	ldr	r0, [pc, #44]	; (8001114 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010e6:	490c      	ldr	r1, [pc, #48]	; (8001118 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010e8:	4a0c      	ldr	r2, [pc, #48]	; (800111c <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ec:	e002      	b.n	80010f4 <LoopCopyDataInit>

080010ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010f2:	3304      	adds	r3, #4

080010f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f8:	d3f9      	bcc.n	80010ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010fc:	4c09      	ldr	r4, [pc, #36]	; (8001124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001100:	e001      	b.n	8001106 <LoopFillZerobss>

08001102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001104:	3204      	adds	r2, #4

08001106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001108:	d3fb      	bcc.n	8001102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800110a:	f001 fb09 	bl	8002720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110e:	f7ff fd1b 	bl	8000b48 <main>
  bx lr
 8001112:	4770      	bx	lr
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800111c:	080027e8 	.word	0x080027e8
  ldr r2, =_sbss
 8001120:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001124:	200000d0 	.word	0x200000d0

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x28>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f923 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	200f      	movs	r0, #15
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fe42 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f93b 	bl	80013f2 <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f903 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000000c 	.word	0x2000000c
 80011b0:	20000018 	.word	0x20000018
 80011b4:	20000014 	.word	0x20000014

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_IncTick+0x20>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000018 	.word	0x20000018
 80011d8:	200000cc 	.word	0x200000cc

080011dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	200000cc 	.word	0x200000cc

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4906      	ldr	r1, [pc, #24]	; (8001288 <__NVIC_EnableIRQ+0x34>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff90 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff2d 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b0:	f7ff ff42 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	6978      	ldr	r0, [r7, #20]
 80013bc:	f7ff ff90 	bl	80012e0 <NVIC_EncodePriority>
 80013c0:	4602      	mov	r2, r0
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	4611      	mov	r1, r2
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff5f 	bl	800128c <__NVIC_SetPriority>
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff35 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff ffa2 	bl	8001344 <SysTick_Config>
 8001400:	4603      	mov	r3, r0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	b480      	push	{r7}
 800140e:	b08b      	sub	sp, #44	; 0x2c
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e161      	b.n	80016e4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001420:	2201      	movs	r2, #1
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8150 	bne.w	80016de <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	4a97      	ldr	r2, [pc, #604]	; (80016a0 <HAL_GPIO_Init+0x294>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d05e      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001448:	4a95      	ldr	r2, [pc, #596]	; (80016a0 <HAL_GPIO_Init+0x294>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d875      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800144e:	4a95      	ldr	r2, [pc, #596]	; (80016a4 <HAL_GPIO_Init+0x298>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d058      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001454:	4a93      	ldr	r2, [pc, #588]	; (80016a4 <HAL_GPIO_Init+0x298>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d86f      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800145a:	4a93      	ldr	r2, [pc, #588]	; (80016a8 <HAL_GPIO_Init+0x29c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d052      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001460:	4a91      	ldr	r2, [pc, #580]	; (80016a8 <HAL_GPIO_Init+0x29c>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d869      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001466:	4a91      	ldr	r2, [pc, #580]	; (80016ac <HAL_GPIO_Init+0x2a0>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d04c      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 800146c:	4a8f      	ldr	r2, [pc, #572]	; (80016ac <HAL_GPIO_Init+0x2a0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d863      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001472:	4a8f      	ldr	r2, [pc, #572]	; (80016b0 <HAL_GPIO_Init+0x2a4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d046      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
 8001478:	4a8d      	ldr	r2, [pc, #564]	; (80016b0 <HAL_GPIO_Init+0x2a4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d85d      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d82a      	bhi.n	80014d8 <HAL_GPIO_Init+0xcc>
 8001482:	2b12      	cmp	r3, #18
 8001484:	d859      	bhi.n	800153a <HAL_GPIO_Init+0x12e>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <HAL_GPIO_Init+0x80>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	08001507 	.word	0x08001507
 8001490:	080014e1 	.word	0x080014e1
 8001494:	080014f3 	.word	0x080014f3
 8001498:	08001535 	.word	0x08001535
 800149c:	0800153b 	.word	0x0800153b
 80014a0:	0800153b 	.word	0x0800153b
 80014a4:	0800153b 	.word	0x0800153b
 80014a8:	0800153b 	.word	0x0800153b
 80014ac:	0800153b 	.word	0x0800153b
 80014b0:	0800153b 	.word	0x0800153b
 80014b4:	0800153b 	.word	0x0800153b
 80014b8:	0800153b 	.word	0x0800153b
 80014bc:	0800153b 	.word	0x0800153b
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	0800153b 	.word	0x0800153b
 80014c8:	0800153b 	.word	0x0800153b
 80014cc:	0800153b 	.word	0x0800153b
 80014d0:	080014e9 	.word	0x080014e9
 80014d4:	080014fd 	.word	0x080014fd
 80014d8:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014de:	e02c      	b.n	800153a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	623b      	str	r3, [r7, #32]
          break;
 80014e6:	e029      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	623b      	str	r3, [r7, #32]
          break;
 80014f0:	e024      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	3308      	adds	r3, #8
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e01f      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	330c      	adds	r3, #12
 8001502:	623b      	str	r3, [r7, #32]
          break;
 8001504:	e01a      	b.n	800153c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150e:	2304      	movs	r3, #4
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e013      	b.n	800153c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800151c:	2308      	movs	r3, #8
 800151e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	611a      	str	r2, [r3, #16]
          break;
 8001526:	e009      	b.n	800153c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001528:	2308      	movs	r3, #8
 800152a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	615a      	str	r2, [r3, #20]
          break;
 8001532:	e003      	b.n	800153c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e000      	b.n	800153c <HAL_GPIO_Init+0x130>
          break;
 800153a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2bff      	cmp	r3, #255	; 0xff
 8001540:	d801      	bhi.n	8001546 <HAL_GPIO_Init+0x13a>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	e001      	b.n	800154a <HAL_GPIO_Init+0x13e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2bff      	cmp	r3, #255	; 0xff
 8001550:	d802      	bhi.n	8001558 <HAL_GPIO_Init+0x14c>
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	e002      	b.n	800155e <HAL_GPIO_Init+0x152>
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	3b08      	subs	r3, #8
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	210f      	movs	r1, #15
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	401a      	ands	r2, r3
 8001570:	6a39      	ldr	r1, [r7, #32]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	431a      	orrs	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80a9 	beq.w	80016de <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2ac>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x2ac>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_GPIO_Init+0x2ac>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <HAL_GPIO_Init+0x2b0>)
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <HAL_GPIO_Init+0x2b4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d00d      	beq.n	80015ec <HAL_GPIO_Init+0x1e0>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <HAL_GPIO_Init+0x2b8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <HAL_GPIO_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_GPIO_Init+0x2bc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d101      	bne.n	80015e4 <HAL_GPIO_Init+0x1d8>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015ec:	2300      	movs	r3, #0
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015fe:	492f      	ldr	r1, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x2b0>)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d006      	beq.n	8001626 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	492b      	ldr	r1, [pc, #172]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001626:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	43db      	mvns	r3, r3
 800162e:	4927      	ldr	r1, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001630:	4013      	ands	r3, r2
 8001632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4921      	ldr	r1, [pc, #132]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	4313      	orrs	r3, r2
 800164a:	60cb      	str	r3, [r1, #12]
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	43db      	mvns	r3, r3
 8001656:	491d      	ldr	r1, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001658:	4013      	ands	r3, r2
 800165a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4917      	ldr	r1, [pc, #92]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
 8001674:	e006      	b.n	8001684 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	43db      	mvns	r3, r3
 800167e:	4913      	ldr	r1, [pc, #76]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001680:	4013      	ands	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01f      	beq.n	80016d0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	490d      	ldr	r1, [pc, #52]	; (80016cc <HAL_GPIO_Init+0x2c0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e01f      	b.n	80016de <HAL_GPIO_Init+0x2d2>
 800169e:	bf00      	nop
 80016a0:	10320000 	.word	0x10320000
 80016a4:	10310000 	.word	0x10310000
 80016a8:	10220000 	.word	0x10220000
 80016ac:	10210000 	.word	0x10210000
 80016b0:	10120000 	.word	0x10120000
 80016b4:	10110000 	.word	0x10110000
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00
 80016c8:	40011000 	.word	0x40011000
 80016cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_GPIO_Init+0x2f4>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4909      	ldr	r1, [pc, #36]	; (8001700 <HAL_GPIO_Init+0x2f4>)
 80016da:	4013      	ands	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f47f ae96 	bne.w	8001420 <HAL_GPIO_Init+0x14>
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	372c      	adds	r7, #44	; 0x2c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	4013      	ands	r3, r2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e001      	b.n	8001726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
 800173a:	460b      	mov	r3, r1
 800173c:	807b      	strh	r3, [r7, #2]
 800173e:	4613      	mov	r3, r2
 8001740:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001742:	787b      	ldrb	r3, [r7, #1]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001748:	887a      	ldrh	r2, [r7, #2]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800174e:	e003      	b.n	8001758 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001750:	887b      	ldrh	r3, [r7, #2]
 8001752:	041a      	lsls	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	611a      	str	r2, [r3, #16]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	041a      	lsls	r2, r3, #16
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	43d9      	mvns	r1, r3
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	400b      	ands	r3, r1
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]
}
 800178a:	bf00      	nop
 800178c:	3714      	adds	r7, #20
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e272      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 8087 	beq.w	80018c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b4:	4b92      	ldr	r3, [pc, #584]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d00c      	beq.n	80017da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c0:	4b8f      	ldr	r3, [pc, #572]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d112      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
 80017cc:	4b8c      	ldr	r3, [pc, #560]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b89      	ldr	r3, [pc, #548]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d06c      	beq.n	80018c0 <HAL_RCC_OscConfig+0x12c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d168      	bne.n	80018c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e24c      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x76>
 80017fc:	4b80      	ldr	r3, [pc, #512]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a7f      	ldr	r2, [pc, #508]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e02e      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d10c      	bne.n	800182c <HAL_RCC_OscConfig+0x98>
 8001812:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7a      	ldr	r2, [pc, #488]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	4b78      	ldr	r3, [pc, #480]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a77      	ldr	r2, [pc, #476]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001834:	d10c      	bne.n	8001850 <HAL_RCC_OscConfig+0xbc>
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a71      	ldr	r2, [pc, #452]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800183c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6e      	ldr	r2, [pc, #440]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e00b      	b.n	8001868 <HAL_RCC_OscConfig+0xd4>
 8001850:	4b6b      	ldr	r3, [pc, #428]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6a      	ldr	r2, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a67      	ldr	r2, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fcb4 	bl	80011dc <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fcb0 	bl	80011dc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e200      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b5d      	ldr	r3, [pc, #372]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0xe4>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fca0 	bl	80011dc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fc9c 	bl	80011dc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	; 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e1ec      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b2:	4b53      	ldr	r3, [pc, #332]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x10c>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d063      	beq.n	8001996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00b      	beq.n	80018f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d11c      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
 80018e6:	4b46      	ldr	r3, [pc, #280]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d001      	beq.n	800190a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e1c0      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190a:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4939      	ldr	r1, [pc, #228]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800191e:	e03a      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800192a:	2201      	movs	r2, #1
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fc55 	bl	80011dc <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001936:	f7ff fc51 	bl	80011dc <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e1a1      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 8001964:	4313      	orrs	r3, r2
 8001966:	600b      	str	r3, [r1, #0]
 8001968:	e015      	b.n	8001996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x270>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fc34 	bl	80011dc <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001978:	f7ff fc30 	bl	80011dc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e180      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d03a      	beq.n	8001a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d019      	beq.n	80019de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019aa:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fc14 	bl	80011dc <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc10 	bl	80011dc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e160      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f000 fa9c 	bl	8001f14 <RCC_Delay>
 80019dc:	e01c      	b.n	8001a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <HAL_RCC_OscConfig+0x274>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7ff fbfa 	bl	80011dc <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ea:	e00f      	b.n	8001a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff fbf6 	bl	80011dc <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d908      	bls.n	8001a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e146      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
 80019fe:	bf00      	nop
 8001a00:	40021000 	.word	0x40021000
 8001a04:	42420000 	.word	0x42420000
 8001a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1e9      	bne.n	80019ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80a6 	beq.w	8001b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10d      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b88      	ldr	r3, [pc, #544]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	4a87      	ldr	r2, [pc, #540]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	61d3      	str	r3, [r2, #28]
 8001a42:	4b85      	ldr	r3, [pc, #532]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b82      	ldr	r3, [pc, #520]	; (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d118      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7e      	ldr	r2, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fbb7 	bl	80011dc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7ff fbb3 	bl	80011dc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	; 0x64
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e103      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	4b75      	ldr	r3, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x4c8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d106      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x312>
 8001a98:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e02d      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x334>
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6213      	str	r3, [r2, #32]
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a66      	ldr	r2, [pc, #408]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	e01c      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d10c      	bne.n	8001aea <HAL_RCC_OscConfig+0x356>
 8001ad0:	4b61      	ldr	r3, [pc, #388]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	f043 0304 	orr.w	r3, r3, #4
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	4b5e      	ldr	r3, [pc, #376]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a5d      	ldr	r2, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	e00b      	b.n	8001b02 <HAL_RCC_OscConfig+0x36e>
 8001aea:	4b5b      	ldr	r3, [pc, #364]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	4a5a      	ldr	r2, [pc, #360]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6213      	str	r3, [r2, #32]
 8001af6:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a57      	ldr	r2, [pc, #348]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0304 	bic.w	r3, r3, #4
 8001b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d015      	beq.n	8001b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fb67 	bl	80011dc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fb63 	bl	80011dc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0b1      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0ee      	beq.n	8001b12 <HAL_RCC_OscConfig+0x37e>
 8001b34:	e014      	b.n	8001b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fb51 	bl	80011dc <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3e:	f7ff fb4d 	bl	80011dc <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e09b      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1ee      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b60:	7dfb      	ldrb	r3, [r7, #23]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d105      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b66:	4b3c      	ldr	r3, [pc, #240]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7c:	4b36      	ldr	r3, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d061      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d146      	bne.n	8001c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b33      	ldr	r3, [pc, #204]	; (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb21 	bl	80011dc <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fb1d 	bl	80011dc <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e06d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d108      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4921      	ldr	r1, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a19      	ldr	r1, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	430b      	orrs	r3, r1
 8001bea:	491b      	ldr	r1, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	; (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7ff faf1 	bl	80011dc <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7ff faed 	bl	80011dc <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e03d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46a>
 8001c1c:	e035      	b.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_RCC_OscConfig+0x4cc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fada 	bl	80011dc <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2c:	f7ff fad6 	bl	80011dc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e026      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x4c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x498>
 8001c4a:	e01e      	b.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e019      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_OscConfig+0x500>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0d0      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d910      	bls.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 0207 	bic.w	r2, r3, #7
 8001cc2:	4965      	ldr	r1, [pc, #404]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d001      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0b8      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf4:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a58      	ldr	r2, [pc, #352]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d0c:	4b53      	ldr	r3, [pc, #332]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d18:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	494d      	ldr	r1, [pc, #308]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d040      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e07f      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e073      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b3d      	ldr	r3, [pc, #244]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06b      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4936      	ldr	r1, [pc, #216]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d88:	f7ff fa28 	bl	80011dc <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff fa24 	bl	80011dc <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e053      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d210      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 0207 	bic.w	r2, r3, #7
 8001dce:	4922      	ldr	r1, [pc, #136]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e032      	b.n	8001e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4916      	ldr	r1, [pc, #88]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d009      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	490e      	ldr	r1, [pc, #56]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e26:	f000 f821 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	490a      	ldr	r1, [pc, #40]	; (8001e60 <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	5ccb      	ldrb	r3, [r1, r3]
 8001e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3e:	4a09      	ldr	r2, [pc, #36]	; (8001e64 <HAL_RCC_ClockConfig+0x1cc>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_RCC_ClockConfig+0x1d0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f986 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	080027b0 	.word	0x080027b0
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000014 	.word	0x20000014

08001e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9a:	e027      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	e027      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a17      	ldr	r2, [pc, #92]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	0c5b      	lsrs	r3, r3, #17
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ece:	fb03 f202 	mul.w	r2, r3, r2
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e004      	b.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a0c      	ldr	r2, [pc, #48]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ee0:	fb02 f303 	mul.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	613b      	str	r3, [r7, #16]
      break;
 8001eea:	e002      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eee:	613b      	str	r3, [r7, #16]
      break;
 8001ef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef2:	693b      	ldr	r3, [r7, #16]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	371c      	adds	r7, #28
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	080027cc 	.word	0x080027cc
 8001f0c:	080027dc 	.word	0x080027dc
 8001f10:	003d0900 	.word	0x003d0900

08001f14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <RCC_Delay+0x34>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <RCC_Delay+0x38>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0a5b      	lsrs	r3, r3, #9
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f30:	bf00      	nop
  }
  while (Delay --);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	1e5a      	subs	r2, r3, #1
 8001f36:	60fa      	str	r2, [r7, #12]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f9      	bne.n	8001f30 <RCC_Delay+0x1c>
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	2000000c 	.word	0x2000000c
 8001f4c:	10624dd3 	.word	0x10624dd3

08001f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e041      	b.n	8001fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe ff4c 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4610      	mov	r0, r2
 8001f90:	f000 fa6e 	bl	8002470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d001      	beq.n	8002008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e035      	b.n	8002074 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a16      	ldr	r2, [pc, #88]	; (8002080 <HAL_TIM_Base_Start_IT+0x90>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_TIM_Base_Start_IT+0x4e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002032:	d004      	beq.n	800203e <HAL_TIM_Base_Start_IT+0x4e>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_TIM_Base_Start_IT+0x94>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b06      	cmp	r3, #6
 800204e:	d010      	beq.n	8002072 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	e007      	b.n	8002072 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	40012c00 	.word	0x40012c00
 8002084:	40000400 	.word	0x40000400

08002088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0202 	mvn.w	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f9b4 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f9a7 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f9b6 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0204 	mvn.w	r2, #4
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f98a 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f97d 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f98c 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0208 	mvn.w	r2, #8
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f960 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f953 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f962 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f936 	bl	8002438 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f929 	bl	8002426 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f938 	bl	800244a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0201 	mvn.w	r2, #1
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fdd2 	bl	8000db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fa6b 	bl	800270e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b40      	cmp	r3, #64	; 0x40
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8fc 	bl	800245c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0220 	mvn.w	r2, #32
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa36 	bl	80026fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIM_ConfigClockSource+0x1c>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0b4      	b.n	800241e <HAL_TIM_ConfigClockSource+0x186>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ec:	d03e      	beq.n	800236c <HAL_TIM_ConfigClockSource+0xd4>
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	f200 8087 	bhi.w	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022fa:	f000 8086 	beq.w	800240a <HAL_TIM_ConfigClockSource+0x172>
 80022fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002302:	d87f      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b70      	cmp	r3, #112	; 0x70
 8002306:	d01a      	beq.n	800233e <HAL_TIM_ConfigClockSource+0xa6>
 8002308:	2b70      	cmp	r3, #112	; 0x70
 800230a:	d87b      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b60      	cmp	r3, #96	; 0x60
 800230e:	d050      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x11a>
 8002310:	2b60      	cmp	r3, #96	; 0x60
 8002312:	d877      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b50      	cmp	r3, #80	; 0x50
 8002316:	d03c      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xfa>
 8002318:	2b50      	cmp	r3, #80	; 0x50
 800231a:	d873      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b40      	cmp	r3, #64	; 0x40
 800231e:	d058      	beq.n	80023d2 <HAL_TIM_ConfigClockSource+0x13a>
 8002320:	2b40      	cmp	r3, #64	; 0x40
 8002322:	d86f      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b30      	cmp	r3, #48	; 0x30
 8002326:	d064      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002328:	2b30      	cmp	r3, #48	; 0x30
 800232a:	d86b      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b20      	cmp	r3, #32
 800232e:	d060      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002330:	2b20      	cmp	r3, #32
 8002332:	d867      	bhi.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d05c      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 8002338:	2b10      	cmp	r3, #16
 800233a:	d05a      	beq.n	80023f2 <HAL_TIM_ConfigClockSource+0x15a>
 800233c:	e062      	b.n	8002404 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6818      	ldr	r0, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6899      	ldr	r1, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f000 f95e 	bl	800260e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	609a      	str	r2, [r3, #8]
      break;
 800236a:	e04f      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f000 f947 	bl	800260e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800238e:	609a      	str	r2, [r3, #8]
      break;
 8002390:	e03c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 f8be 	bl	8002520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2150      	movs	r1, #80	; 0x50
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f915 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023b0:	e02c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	f000 f8dc 	bl	800257c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2160      	movs	r1, #96	; 0x60
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f905 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023d0:	e01c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	f000 f89e 	bl	8002520 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2140      	movs	r1, #64	; 0x40
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f8f5 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 80023f0:	e00c      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 f8ec 	bl	80025da <TIM_ITRx_SetConfig>
      break;
 8002402:	e003      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      break;
 8002408:	e000      	b.n	800240c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800240a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
	...

08002470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a25      	ldr	r2, [pc, #148]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x28>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a22      	ldr	r2, [pc, #136]	; (800251c <TIM_Base_SetConfig+0xac>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d003      	beq.n	80024c2 <TIM_Base_SetConfig+0x52>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a17      	ldr	r2, [pc, #92]	; (800251c <TIM_Base_SetConfig+0xac>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d108      	bne.n	80024d4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <TIM_Base_SetConfig+0xa8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d103      	bne.n	8002508 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	615a      	str	r2, [r3, #20]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40000400 	.word	0x40000400

08002520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	f023 0201 	bic.w	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800254a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 030a 	bic.w	r3, r3, #10
 800255c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0210 	bic.w	r2, r3, #16
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	031b      	lsls	r3, r3, #12
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	621a      	str	r2, [r3, #32]
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc80      	pop	{r7}
 80025d8:	4770      	bx	lr

080025da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f043 0307 	orr.w	r3, r3, #7
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	609a      	str	r2, [r3, #8]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800260e:	b480      	push	{r7}
 8002610:	b087      	sub	sp, #28
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002628:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	4313      	orrs	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e041      	b.n	80026e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d009      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d004      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10c      	bne.n	80026d6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc80      	pop	{r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40012c00 	.word	0x40012c00
 80026f8:	40000400 	.word	0x40000400

080026fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <__libc_init_array>:
 8002720:	b570      	push	{r4, r5, r6, lr}
 8002722:	2600      	movs	r6, #0
 8002724:	4d0c      	ldr	r5, [pc, #48]	; (8002758 <__libc_init_array+0x38>)
 8002726:	4c0d      	ldr	r4, [pc, #52]	; (800275c <__libc_init_array+0x3c>)
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	42a6      	cmp	r6, r4
 800272e:	d109      	bne.n	8002744 <__libc_init_array+0x24>
 8002730:	f000 f822 	bl	8002778 <_init>
 8002734:	2600      	movs	r6, #0
 8002736:	4d0a      	ldr	r5, [pc, #40]	; (8002760 <__libc_init_array+0x40>)
 8002738:	4c0a      	ldr	r4, [pc, #40]	; (8002764 <__libc_init_array+0x44>)
 800273a:	1b64      	subs	r4, r4, r5
 800273c:	10a4      	asrs	r4, r4, #2
 800273e:	42a6      	cmp	r6, r4
 8002740:	d105      	bne.n	800274e <__libc_init_array+0x2e>
 8002742:	bd70      	pop	{r4, r5, r6, pc}
 8002744:	f855 3b04 	ldr.w	r3, [r5], #4
 8002748:	4798      	blx	r3
 800274a:	3601      	adds	r6, #1
 800274c:	e7ee      	b.n	800272c <__libc_init_array+0xc>
 800274e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002752:	4798      	blx	r3
 8002754:	3601      	adds	r6, #1
 8002756:	e7f2      	b.n	800273e <__libc_init_array+0x1e>
 8002758:	080027e0 	.word	0x080027e0
 800275c:	080027e0 	.word	0x080027e0
 8002760:	080027e0 	.word	0x080027e0
 8002764:	080027e4 	.word	0x080027e4

08002768 <memset>:
 8002768:	4603      	mov	r3, r0
 800276a:	4402      	add	r2, r0
 800276c:	4293      	cmp	r3, r2
 800276e:	d100      	bne.n	8002772 <memset+0xa>
 8002770:	4770      	bx	lr
 8002772:	f803 1b01 	strb.w	r1, [r3], #1
 8002776:	e7f9      	b.n	800276c <memset+0x4>

08002778 <_init>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr

08002784 <_fini>:
 8002784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002786:	bf00      	nop
 8002788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800278a:	bc08      	pop	{r3}
 800278c:	469e      	mov	lr, r3
 800278e:	4770      	bx	lr
